// <auto-generated />
using System;
using IMP.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace IMP.EFCore.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230204134755_init db")]
    partial class initdb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("IMP.EFCore.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("LastUpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 2, 4, 20, 47, 55, 120, DateTimeKind.Local).AddTicks(3628),
                            Email = "admin@gmail.com",
                            LastUpdatedAt = new DateTime(2023, 2, 4, 20, 47, 55, 120, DateTimeKind.Local).AddTicks(3638),
                            Name = "Admin",
                            Password = "e6e061838856bf47e1de730719fb2609",
                            Role = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 2, 4, 20, 47, 55, 120, DateTimeKind.Local).AddTicks(3641),
                            Email = "user@gmail.com",
                            LastUpdatedAt = new DateTime(2023, 2, 4, 20, 47, 55, 120, DateTimeKind.Local).AddTicks(3641),
                            Name = "User",
                            Password = "e6e061838856bf47e1de730719fb2609",
                            Role = "user"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
